library(httr)
#HTTP_PROXY=http://wpad.cummins.com:80
#HTTPS_PROXY=http://wpad.cummins.com:80
set_config(
use_proxy(url="https://wpad.cummins.com", port=80, username = NULL, password = NULL)
)
devtools::install_github("geneorama/geneorama")
install.packages("geneorama")
devtools::install_github("geneorama/geneorama")
devtools::install_github("geneorama/geneorama")
library(plotly)
now_ct <- as.POSIXct(Sys.time())
tm <- seq(0, 600, by = 10)
x <- now_ct - tm
y <- rnorm(length(x))
p <- plot_ly(x = ~x, y = ~y, mode = 'lines', text = paste(tm, "seconds from now in", Sys.timezone()))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="timeseries-3")
chart_link
library(plotly)
now_ct <- as.POSIXct(Sys.time())
tm <- seq(0, 600, by = 10)
x <- now_ct - tm
y <- rnorm(length(x))
p <- plot_ly(x = ~x, y = ~y, mode = 'lines', text = paste(tm, "seconds from now in", Sys.timezone()))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="timeseries-3")
chart_link
plogis::
plotly::
plotly::
plotly?
;
devtools::install_github("laderast/burro")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("laderast/burro")
devtools::install_github("laderast/burro")
install.packages("C:\Users\qq834\Google Drive\chicago\burro")
install("C:\Users\qq834\Google Drive\chicago\burro")
install("file:///C:/Users/qq834/Google Drive/chicago/burro-master.zip")
install.packages("file:///C:/Users/qq834/Google Drive/chicago/burro-master.zip")
library(burro)
library("burro")
library(burro)
install.packages("file:///C:/Users/qq834/Google Drive/chicago/burro-master.zip")
setwd("C:/Users/qq834/Google Drive/chicago/shiny_module_tutorial")
library(shiny)
select_scatter_ui <- function(id, var_choices){
#initialize a namespace ID function - our key to our namespace
ns <- NS(id)
#return a tagList with our ui elements
tagList(
#note we have to wrap the input id in our namespace function ns()
selectInput(inputId = ns("x_var"), label="Select X Variable",
choices=var_choices, selected = var_choices[1]),
plotOutput(ns("scatter_plot"))
)
}
select_scatter_server <- function(input, output, session, data) {
output$scatter_plot <- renderPlot({
#notice we don't use ns() here to refer to input objects -
#this is handled by callModule
x_var <- input$x_var
data %>% ggplot(aes_string(x=x_var)) +
geom_histogram()
})
}
select_scatter_ui(id = mtcars_id, var_choices = mtcars_var_choices)
library(shiny)
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars_id <- "mtcars_mod"
mtcars <- data.frame(mtcars)
mtcars_var_choices = colnames(mtcars)
select_scatter_ui(id = mtcars_id, var_choices = mtcars_var_choices)
library(shiny)
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars_id <- "mtcars_mod"
mtcars <- data.frame(mtcars)
mtcars_var_choices = colnames(mtcars)
#load the module code
source("modules.R")
ui <- fluidPage(
#select_scatter_ui is how we initialize the ui module with id "mtcars"
select_scatter_ui(id = mtcars_id, var_choices = mtcars_var_choices)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
#callModule on select_scatter_server with id "mtcars"
callModule(select_scatter_server, mtcars_id, data=mtcars)
}
# Run the application
shinyApp(ui = ui, server = server)
callModule(select_scatter_server, mtcars_id, data=mtcars)
select_scatter_server(mtcars_id, data=mtcars)
select_scatter_server <- function(input, data) {
output$scatter_plot <- renderPlot({
#notice we don't use ns() here to refer to input objects -
#this is handled by callModule
x_var <- input$x_var
data %>% ggplot(aes_string(x=x_var)) +
geom_histogram()
})
}
library(shiny)
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars_id <- "mtcars_mod"
mtcars <- data.frame(mtcars)
mtcars_var_choices = colnames(mtcars)
select_scatter_server(mtcars_id, data=mtcars)
setwd("C:/Users/qq834/Google Drive/chicago/shiny_module_tutorial/module_demo_02")
#Example 2 - using multiple instances of a module
library(shiny)
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars_id <- "mtcars_mod"
mtcars <- data.frame(mtcars)
mtcars_var_choices = colnames(mtcars)
data(iris)
iris_id <- "iris_mod"
iris_var_choices <- colnames(iris)
#load the module code
source("modules.R")
ui <- fluidPage(
#select_scatter_ui is how we initialize the ui module with id "mtcars"
select_scatter_ui(id = mtcars_id, var_choices = mtcars_var_choices),
#use select_scatter_ui with iris data
select_scatter_ui(id = iris_id, var_choices = iris_var_choices)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
#callModule on select_scatter_server with mtcars_id
callModule(select_scatter_server, mtcars_id, data=mtcars)
#callModule on select_scatter_server with iris_id
callModule(select_scatter_server, iris_id, data=iris)
}
# Run the application
shinyApp(ui = ui, server = server)
renderPlot({
#notice we don't use ns() here to refer to input objects -
#this is handled by callModule
x_var <- input$x_var
data %>% ggplot(aes_string(x=x_var)) +
geom_histogram()
})
#notice we don't use ns() here to refer to input objects -
#this is handled by callModule
x_var <- input$x_var
input= mtcars_id
data=mtcars
renderPlot({
#notice we don't use ns() here to refer to input objects -
#this is handled by callModule
x_var <- input$x_var
data %>% ggplot(aes_string(x=x_var)) +
geom_histogram()
})
#notice we don't use ns() here to refer to input objects -
#this is handled by callModule
x_var <- input$x_var
setwd("C:/Users/qq834/Google Drive/chicago/ShinyTimeseriesForecasting")
library(shiny)
library(datasets)
library(forecast)
shinyServer(function(input, output) {
getDataset <- reactive({
if (input$variable=="AirPassengers")
{
return(AirPassengers)
}
else if (input$variable=="gas")
{
return(gas)
}
else
{
return(wineind)
}
})
output$caption <- renderText({
paste("Dataset: ", input$variable)
})
output$dcompPlot <- renderPlot({
ds_ts <- ts(getDataset(), frequency=12)
f <- decompose(ds_ts)
plot(f)
})
output$arimaForecastPlot <- renderPlot({
fit <- auto.arima(getDataset())
plot(forecast(fit, h=input$ahead))
})
output$etsForecastPlot <- renderPlot({
fit <- ets(getDataset())
plot(forecast(fit, h=input$ahead))
})
})
install.packages("forecast")
library(shiny)
library(datasets)
library(forecast)
shinyServer(function(input, output) {
getDataset <- reactive({
if (input$variable=="AirPassengers")
{
return(AirPassengers)
}
else if (input$variable=="gas")
{
return(gas)
}
else
{
return(wineind)
}
})
output$caption <- renderText({
paste("Dataset: ", input$variable)
})
output$dcompPlot <- renderPlot({
ds_ts <- ts(getDataset(), frequency=12)
f <- decompose(ds_ts)
plot(f)
})
output$arimaForecastPlot <- renderPlot({
fit <- auto.arima(getDataset())
plot(forecast(fit, h=input$ahead))
})
output$etsForecastPlot <- renderPlot({
fit <- ets(getDataset())
plot(forecast(fit, h=input$ahead))
})
})
library(shiny)
# Define UI
shinyUI(pageWithSidebar(
# Application title
headerPanel("Timeseries Forecasting"),
# Sidebar with controls to select the dataset and forecast ahead duration
sidebarPanel(
selectInput("variable", "Variable:",
list("Air Passengers" = "AirPassengers",
"Australian total wine sales" = "wineind",
"Australian monthly gas production" = "gas")),
numericInput("ahead", "Months to Forecast Ahead:", 12),
submitButton("Update View")
),
# Show the caption and forecast plots
mainPanel(
h3(textOutput("caption")),
tabsetPanel(
tabPanel("Exponetial Smoothing (ETS) Forecast", plotOutput("etsForecastPlot")),
tabPanel("Arima Forecast", plotOutput("arimaForecastPlot")),
tabPanel("Timeseries Decomposition", plotOutput("dcompPlot"))
)
)
))
library(shiny)
library(ggplot2)
library(dplyr)
data(passengers)
#load the module code
source("sertver.r")
source("ui.r")
library(shiny)
library(ggplot2)
library(dplyr)
data(passengers)
#load the module code
source("server.r")
source("ui.r")
shinyServer(function(input, output) {
getDataset <- reactive({
if (input$variable=="AirPassengers")
{
return(AirPassengers)
}
else if (input$variable=="gas")
{
return(gas)
}
else
{
return(wineind)
}
})
output$caption <- renderText({
paste("Dataset: ", input$variable)
})
output$dcompPlot <- renderPlot({
ds_ts <- ts(getDataset(), frequency=12)
f <- decompose(ds_ts)
plot(f)
})
output$arimaForecastPlot <- renderPlot({
fit <- auto.arima(getDataset())
plot(forecast(fit, h=input$ahead))
})
output$etsForecastPlot <- renderPlot({
fit <- ets(getDataset())
plot(forecast(fit, h=input$ahead))
})
})
library(shiny)
library(ggplot2)
library(dplyr)
data(passengers)
library(shiny)
library(datasets)
library(forecast)
data(passengers)
data(AirPassengers)
library(shiny)
library(ggplot2)
library(dplyr)
data(AirPassengers)
library(shiny)
library(datasets)
library(forecast)
#load the module code
source("server.r")
source("ui.r")
ui <- shinyUI(pageWithSidebar(
# Application title
headerPanel("Timeseries Forecasting"),
# Sidebar with controls to select the dataset and forecast ahead duration
sidebarPanel(
selectInput("variable", "Variable:",
list("Air Passengers" = "AirPassengers",
"Australian total wine sales" = "wineind",
"Australian monthly gas production" = "gas")),
numericInput("ahead", "Months to Forecast Ahead:", 12),
submitButton("Update View")
),
# Show the caption and forecast plots
mainPanel(
h3(textOutput("caption")),
tabsetPanel(
tabPanel("Exponetial Smoothing (ETS) Forecast", plotOutput("etsForecastPlot")),
tabPanel("Arima Forecast", plotOutput("arimaForecastPlot")),
tabPanel("Timeseries Decomposition", plotOutput("dcompPlot"))
)
)
))
# Define server logic required to draw a histogram
server <- shinyServer(function(input, output) {
getDataset <- reactive({
if (input$variable=="AirPassengers")
{
return(AirPassengers)
}
else if (input$variable=="gas")
{
return(gas)
}
else
{
return(wineind)
}
})
output$caption <- renderText({
paste("Dataset: ", input$variable)
})
output$dcompPlot <- renderPlot({
ds_ts <- ts(getDataset(), frequency=12)
f <- decompose(ds_ts)
plot(f)
})
output$arimaForecastPlot <- renderPlot({
fit <- auto.arima(getDataset())
plot(forecast(fit, h=input$ahead))
})
output$etsForecastPlot <- renderPlot({
fit <- ets(getDataset())
plot(forecast(fit, h=input$ahead))
})
})
# Run the application
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='mohcinemadkour',  token='6CC1A67FFB2C3F8FC7B80707606694F1',  secret='0GrenldtSp3BYHAeySMqL8sexElxG2uhuNve0Eum')
rsconnect::setAccountInfo(name='mohcinemadkour',token='6CC1A67FFB2C3F8FC7B80707606694F1',secret='0GrenldtSp3BYHAeySMqL8sexElxG2uhuNve0Eum')
rsconnect::setAccountInfo(name='mohcinemadkour', token='6CC1A67FFB2C3F8FC7B80707606694F1', secret='0GrenldtSp3BYHAeySMqL8sexElxG2uhuNve0Eum')
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
pkgTest(rsconnect)
require(rsconnect)
setAccountInfo(name='mohcinemadkour', token='6CC1A67FFB2C3F8FC7B80707606694F1', secret='0GrenldtSp3BYHAeySMqL8sexElxG2uhuNve0Eum')
